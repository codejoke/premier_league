load("~/Dropbox/Glasnost/Premier_League/Premier_League.Rdata")
View(PLeague)
tail(PLeague)
PLeague$Date<-as.Date(PLeague$Date,"%d/%m/%Y")
PLeague<-PLeague[order(PLeague$Date),]
library(mcmcplots)
library(stringr)
PLeague$Date<-as.Date(PLeague$Date,"%d/%m/%Y")
PLeague<-PLeague[order(PLeague$Date),]
qplot(Season, HomeTeam, data=PLeague, ylab="Team", xlab = "Particicipation by Season")
View(PLeague)
summary(PLeague$MatchResult)
fa$MatchResult<-sign(fa$HomeGoals-fa$AwayGoals)
PLeague$MatchResult<-sign(PLeague$HomeGoals-PLeague$AwayGoals)
d<-na.omit(PLeague)
teams<-sort(unique(c(d$HomeTeam,d$AwayTeam)))
seasons<-unique(d$Season)
Season=as.numeric(factor(d$Season,levels=seasons))
HomeGoals=d$HomeGoals
AwayGoals=d$AwayGoals
HomeTeam=as.numeric(factor(d$HomeTeam,levels=teams))
AwayTeam=as.numeric(factor(d$AwayTeam,levels=teams))
n_teams=length(teams)
n_games=nrow(fa)
n_games=nrow(d)
n_seasons=length(seasons)
hist(c(AwayGoals,HomeGoals),xlim=c(-0.5,9),breaks=-1:9+0.5,
main = "Number of goals scored by a team in a match.",
ylab="",xlab="")
hist(c(AwayGoals,HomeGoals),xlim=c(-0.5,9),breaks=-1:9+0.5,
main = "Number of goals scored by a team in a match.",
ylab="",xlab="",col="steelblue4")
hist(c(AwayGoals,HomeGoals),xlim=c(-0.5,9),breaks=-1:9+0.5,
main = "Distribution of goals scored by a team in a Premier League match.",
ylab="",xlab="",col="steelblue4")
setwd("~/Dropbox/Glasnost/Premier_League")
data_list<-list(HomeGoals=HomeGoals,AwayGoals=AwayGoals,HomeTeam=HomeTeam,
AwayTeam=AwayTeam,Season=Season,n_teams=n_teams,n_games=n_games,
n_seasons=n_seasons)
parameters<-c("home_baseline","away_baseline","skill","season_sigma","group_sigma",
"group_skill")
model.file <- "poisson.txt"
system.time(m1<- jags(data=data_list,inits=NULL,parameters.to.save=parameters,
model.file=model.file,
n.chains=4,n.iter=10000,n.burnin=2500,n.thin=5))
lm1<-as.mcmc(m1)
mm1<-as.matrix(lm1)
team_skill<-mm1[,str_detect(string=colnames(mm1),"skill\\[21,")]
team_skill<-(team_skill-rowMeans(team_skill))+mm1[, "home_baseline[21]"]
team_skill<-exp(team_skill)
colnames(team_skill)<-teams
team_skill<-team_skill[,c("Arsenal","Aston Villa","Cardiff","Chelsea","Crystal Palace",
"Everton","Fulham","Hull","Liverpool","Man City",
"Man United","Newcastle","Norwich","Southampton",
"Stoke","Sunderland","Swansea","Tottenham",
"West Brom","West Ham")]
team_skill<-team_skill[,order(colMeans(team_skill),decreasing = T)]
par(mar=c(2,0.7,0.7,0.7),xaxs = "i")
caterplot(team_skill,labels.loc="above",val.lim = c(0.7, 3.8))
par(mar=c(2,0.7,0.7,0.7))
caterplot(team_skill,labels.loc="above",val.lim = c(0.7, 3.8))
par(mar=c(3,1,2,1))
caterplot(team_skill,labels.loc="above",val.lim = c(0.7, 3.8))
n <- nrow(mm1)
m_pred <- sapply(1:nrow(premierleague), function(i) {
home_team <- which(teams == premierleague$HomeTeam[i])
away_team <- which(teams == premierleague$AwayTeam[i])
season <- which(seasons == premierleague$Season[i])
home_skill <- mm1[, col_name("skill", season, home_team)]
away_skill <- mm1[, col_name("skill", season, away_team)]
home_baseline <- mm1[, col_name("home_baseline", season)]
away_baseline <- mm1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
n <- nrow(mm1)
m_pred <- sapply(1:nrow(PLeague), function(i) {
home_team <- which(teams == PLeague$HomeTeam[i])
away_team <- which(teams == PLeague$AwayTeam[i])
season <- which(seasons == PLeague$Season[i])
home_skill <- mm1[, col_name("skill", season, home_team)]
away_skill <- mm1[, col_name("skill", season, away_team)]
home_baseline <- mm1[, col_name("home_baseline", season)]
away_baseline <- mm1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
col_name <- function(name, ...) {
paste0(name, "[", paste(..., sep = ","), "]")
}
n <- nrow(mm1)
m_pred <- sapply(1:nrow(PLeague), function(i) {
home_team <- which(teams == PLeague$HomeTeam[i])
away_team <- which(teams == PLeague$AwayTeam[i])
season <- which(seasons == PLeague$Season[i])
home_skill <- mm1[, col_name("skill", season, home_team)]
away_skill <- mm1[, col_name("skill", season, away_team)]
home_baseline <- mm1[, col_name("home_baseline", season)]
away_baseline <- mm1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
home_skill <- mm1[, col_name("skill", season, home_team)]
names(PLeague)
View(mm1)
dim(mm1)
pl_forecast <- PLeague[is.na(PLeague$HomeGoals), c("Season", "Date", "HomeTeam",
"AwayTeam")]
rm(pl_forecast)
save.image("~/Dropbox/Glasnost/Premier_League/output.RData")
setwd("~/Desktop/baath")
load("laliga.RData")
laliga$MatchResult <- sign(laliga$HomeGoals - laliga$AwayGoals)
d <- na.omit(laliga)
teams <- unique(c(d$HomeTeam, d$AwayTeam))
seasons <- unique(d$Season)
data_list <- list(HomeGoals = d$HomeGoals, AwayGoals = d$AwayGoals,
HomeTeam = as.numeric(factor(d$HomeTeam, levels=teams)),
AwayTeam = as.numeric(factor(d$AwayTeam, levels=teams)),
Season = as.numeric(factor(d$Season, levels=seasons)),
n_teams = length(teams), n_games = nrow(d),
n_seasons = length(seasons))
col_name <- function(name, ...) {
paste0(name, "[", paste(..., sep=",") , "]")
}
m3_string <- "model {
for(i in 1:n_games) {
HomeGoals[i] ~ dpois(lambda_home[Season[i], HomeTeam[i],AwayTeam[i]])
AwayGoals[i] ~ dpois(lambda_away[Season[i], HomeTeam[i],AwayTeam[i]])
}
for(season_i in 1:n_seasons) {
for(home_i in 1:n_teams) {
for(away_i in 1:n_teams) {
lambda_home[season_i, home_i, away_i] <- exp( home_baseline[season_i] + skill[season_i, home_i] - skill[season_i, away_i])
lambda_away[season_i, home_i, away_i] <- exp( away_baseline[season_i] + skill[season_i, away_i] - skill[season_i, home_i])
}
skill[1, 1] <- 0
for(j in 2:n_teams) {
skill[1, j] ~ dnorm(group_skill, group_tau)
}
group_skill ~ dnorm(0, 0.0625)
group_tau <- 1/pow(group_sigma, 2)
group_sigma ~ dunif(0, 3)
home_baseline[1] ~ dnorm(0, 0.0625)
away_baseline[1] ~ dnorm(0, 0.0625)
for(season_i in 2:n_seasons) {
skill[season_i, 1] <- 0
for(j in 2:n_teams) {
skill[season_i, j] ~ dnorm(skill[season_i - 1, j], season_tau)
}
home_baseline[season_i] ~ dnorm(home_baseline[season_i - 1], season_tau)
away_baseline[season_i] ~ dnorm(away_baseline[season_i - 1], season_tau)
}
season_tau <- 1/pow(season_sigma, 2)
season_sigma ~ dunif(0, 3)
}"
m3 <- jags.model(textConnection(m3_string), data=data_list, n.chains=3, n.adapt=10000)
update(m3, 10000)
s3 <- coda.samples(m3, variable.names=c("home_baseline", "away_baseline","skill", "season_sigma", "group_sigma", "group_skill"), n.iter=40000, thin=8)
ms3 <- as.matrix(s3)
team_skill <- ms3[, str_detect(string=colnames(ms3), "skill\\[5,")]
team_skill <- (team_skill - rowMeans(team_skill)) + ms3[, "home_baseline[5]"]
team_skill <- exp(team_skill)
colnames(team_skill) <- teams
team_skill <- team_skill[,order(colMeans(team_skill), decreasing=T)]
caterplot(team_skill, labels.loc="above", val.lim=c(0.7, 3.8))
plotPost(team_skill[, "FC Barcelona"] - team_skill[, "Real Madrid CF"], compVal = 0, xlab = "← Real Madrid     vs     Barcelona →")
n <- nrow(ms3)
dim(ms3)
m3_pred <- sapply(1:nrow(laliga), function(i) {
home_team <- which(teams == laliga$HomeTeam[i])
away_team <- which(teams == laliga$AwayTeam[i])
season <- which(seasons == laliga$Season[i])
home_skill <- ms3[, col_name("skill", season, home_team)]
away_skill <- ms3[, col_name("skill", season, away_team)]
home_baseline <- ms3[, col_name("home_baseline", season)]
away_baseline <- ms3[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
m3_pred <- t(m3_pred)
laliga_forecast <- laliga[is.na(laliga$HomeGoals), c("Season", "Week", "HomeTeam", "AwayTeam")]
m3_forecast <- m3_pred[is.na(laliga$HomeGoals),]
laliga_forecast$mean_home_goals <- round(m3_forecast[,"mean_home_goal"], 1)
laliga_forecast$mean_away_goals <- round(m3_forecast[,"mean_away_goal"], 1)
laliga_forecast$mode_home_goals <- m3_forecast[,"mode_home_goal"]
View(laliga_forecast)
laliga_forecast <- laliga[is.na(laliga$HomeGoals), c("Season", "Week", "HomeTeam", "AwayTeam")]
View(laliga_forecast)
m3_forecast <- m3_pred[is.na(laliga$HomeGoals),]
View(`m3_forecast`)
laliga_forecast$mean_home_goals <- round(m3_forecast[,"mean_home_goal"], 1)
laliga_forecast$mean_away_goals <- round(m3_forecast[,"mean_away_goal"], 1)
laliga_forecast$mode_home_goals <- m3_forecast[,"mode_home_goal"]
laliga_forecast$mode_away_goals <- m3_forecast[,"mode_away_goal"]
laliga_forecast$predicted_winner <- ifelse(m3_forecast[ , "match_result"] == 1, laliga_forecast$HomeTeam,
ifelse(m3_forecast[ , "match_result"] == -1, laliga_forecast$AwayTeam, "Draw"))
rownames(laliga_forecast) <- NULL
print(xtable(laliga_forecast, align="cccccccccc"), type="html")
View(`m3_pred`)
dim(ms3)
save.image("~/Desktop/baath/laliga_output.RData")
load("~/Desktop/pre_bin/output.RData")
dim(mm1)
View(mm1)
load("~/Desktop/baath/laliga_output.RData")
View(ms3)
?coda.samples
load("~/Desktop/baath/laliga_output.RData")
home_skill <- ms3[, col_name("skill", season, home_team)]
n <- nrow(ms3)
home_team <- which(teams == "FC Sevilla")
away_team <- which(teams == "FC Valencia")
season <- which(seasons == "2012/13")
home_skill <- ms3[, col_name("skill", season, home_team)]
away_skill <- ms3[, col_name("skill", season, away_team)]
home_baseline <- ms3[, col_name("home_baseline", season)]
away_baseline <- ms3[, col_name("away_baseline", season)]
load("~/Desktop/pre_bin/output.RData")
n <- nrow(mm1)
home_team <- which(teams == "Arsenal")
away_team <- which(teams == "Chelsea")
season <- which(seasons == "2012/13")
home_skill <- ms3[, col_name("skill", season, home_team)]
home_skill <- mm1[, col_name("skill", season, home_team)]
away_skill <- mm1[, col_name("skill", season, away_team)]
home_baseline <- mm1[, col_name("home_baseline", season)]
away_baseline <- mm1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
plot_goals(home_goals, away_goals)
plot(home_goals)
plotPost = function( paramSampleVec , credMass=0.95 , compVal=NULL ,
HDItextPlace=0.7 , ROPE=NULL , yaxt=NULL , ylab=NULL ,
xlab=NULL , cex.lab=NULL , cex=NULL , xlim=NULL , main=NULL ,
col=NULL , border=NULL , showMode=F , showCurve=F , breaks=NULL ,
... ) {
# Override defaults of hist function, if not specified by user:
# (additional arguments "..." are passed to the hist function)
if ( is.null(xlab) ) xlab="Parameter"
if ( is.null(cex.lab) ) cex.lab=1.5
if ( is.null(cex) ) cex=1.4
if ( is.null(xlim) ) xlim=range( c( compVal , paramSampleVec ) )
if ( is.null(main) ) main=""
if ( is.null(yaxt) ) yaxt="n"
if ( is.null(ylab) ) ylab=""
if ( is.null(col) ) col="skyblue"
if ( is.null(border) ) border="white"
postSummary = matrix( NA , nrow=1 , ncol=11 ,
dimnames=list( c( xlab ) ,
c("mean","median","mode",
"hdiMass","hdiLow","hdiHigh",
"compVal","pcGTcompVal",
"ROPElow","ROPEhigh","pcInROPE")))
postSummary[,"mean"] = mean(paramSampleVec)
postSummary[,"median"] = median(paramSampleVec)
mcmcDensity = density(paramSampleVec)
postSummary[,"mode"] = mcmcDensity$x[which.max(mcmcDensity$y)]
source("HDIofMCMC.R")
HDI = HDIofMCMC( paramSampleVec , credMass )
postSummary[,"hdiMass"]=credMass
postSummary[,"hdiLow"]=HDI[1]
postSummary[,"hdiHigh"]=HDI[2]
# Plot histogram.
if ( is.null(breaks) ) {
breaks = c( seq( from=min(paramSampleVec) , to=max(paramSampleVec) ,
by=(HDI[2]-HDI[1])/18 ) , max(paramSampleVec) )
}
if ( !showCurve ) {
par(xpd=NA)
histinfo = hist( paramSampleVec , xlab=xlab , yaxt=yaxt , ylab=ylab ,
freq=F , border=border , col=col ,
xlim=xlim , main=main , cex=cex , cex.lab=cex.lab ,
breaks=breaks , ... )
}
if ( showCurve ) {
par(xpd=NA)
histinfo = hist( paramSampleVec , plot=F )
densCurve = density( paramSampleVec , adjust=2 )
plot( densCurve$x , densCurve$y , type="l" , lwd=5 , col=col , bty="n" ,
xlim=xlim , xlab=xlab , yaxt=yaxt , ylab=ylab ,
main=main , cex=cex , cex.lab=cex.lab , ... )
}
cenTendHt = 0.9*max(histinfo$density)
cvHt = 0.7*max(histinfo$density)
ROPEtextHt = 0.55*max(histinfo$density)
# Display mean or mode:
if ( showMode==F ) {
meanParam = mean( paramSampleVec )
text( meanParam , cenTendHt ,
bquote(mean==.(signif(meanParam,3))) , adj=c(.5,0) , cex=cex )
} else {
dres = density( paramSampleVec )
modeParam = dres$x[which.max(dres$y)]
text( modeParam , cenTendHt ,
bquote(mode==.(signif(modeParam,3))) , adj=c(.5,0) , cex=cex )
}
# Display the comparison value.
if ( !is.null( compVal ) ) {
cvCol = "darkgreen"
pcgtCompVal = round( 100 * sum( paramSampleVec > compVal )
/ length( paramSampleVec )  , 1 )
pcltCompVal = 100 - pcgtCompVal
lines( c(compVal,compVal) , c(0.96*cvHt,0) ,
lty="dotted" , lwd=1 , col=cvCol )
text( compVal , cvHt ,
bquote( .(pcltCompVal)*"% < " *
.(signif(compVal,3)) * " < "*.(pcgtCompVal)*"%" ) ,
adj=c(pcltCompVal/100,0) , cex=0.8*cex , col=cvCol )
postSummary[,"compVal"] = compVal
postSummary[,"pcGTcompVal"] = ( sum( paramSampleVec > compVal )
/ length( paramSampleVec ) )
}
# Display the ROPE.
if ( !is.null( ROPE ) ) {
ropeCol = "darkred"
pcInROPE = ( sum( paramSampleVec > ROPE[1] & paramSampleVec < ROPE[2] )
/ length( paramSampleVec ) )
lines( c(ROPE[1],ROPE[1]) , c(0.96*ROPEtextHt,0) , lty="dotted" , lwd=2 ,
col=ropeCol )
lines( c(ROPE[2],ROPE[2]) , c(0.96*ROPEtextHt,0) , lty="dotted" , lwd=2 ,
col=ropeCol)
text( mean(ROPE) , ROPEtextHt ,
bquote( .(round(100*pcInROPE))*"% in ROPE" ) ,
adj=c(.5,0) , cex=1 , col=ropeCol )
postSummary[,"ROPElow"]=ROPE[1]
postSummary[,"ROPEhigh"]=ROPE[2]
postSummary[,"pcInROPE"]=pcInROPE
}
# Display the HDI.
lines( HDI , c(0,0) , lwd=4 )
text( mean(HDI) , 0 , bquote(.(100*credMass) * "% HDI" ) ,
adj=c(.5,-1.7) , cex=cex )
text( HDI[1] , 0 , bquote(.(signif(HDI[1],3))) ,
adj=c(HDItextPlace,-0.5) , cex=cex )
text( HDI[2] , 0 , bquote(.(signif(HDI[2],3))) ,
adj=c(1.0-HDItextPlace,-0.5) , cex=cex )
par(xpd=F)
#
return( postSummary )
}
plot_goals(home_goals, away_goals)
plot_goals <- function(home_goals, away_goals) {
n_matches <- length(home_goals)
goal_diff <- home_goals - away_goals
match_result <- ifelse(goal_diff < 0, "away_win", ifelse(goal_diff > 0, "home_win", "equal"))
hist(home_goals, xlim=c(-0.5, 10), breaks=(0:100) - 0.5)
hist(away_goals, xlim=c(-0.5, 10), breaks=(0:100) - 0.5)
hist(goal_diff, xlim=c(-6, 6), breaks=(-100:100) - 0.5 )
barplot(table(match_result) / n_matches , ylim=c(0, 1))
}
plot_goals(home_goals, away_goals)
away_team <- which(teams == "Aston Villa")
away_team <- which(teams == "Cardiff")
away_team <- which(teams == "Crystal Palace")
away_team <- which(teams == "Everton")
away_team <- which(teams == "Fulham")
away_team <- which(teams == "West Ham")
away_team <- which(teams == "West Brom")
away_team <- which(teams == "Tottenham")
away_team <- which(teams == "Stoke")
away_team <- which(teams == "Bayern")
away_team <- which(teams == "Crystal Palace")
away_team <- which(teams == "Everton")
away_team <- which(teams == "Fulham")
away_team <- which(teams == "Hull")
away_team <- which(teams == "Liverpool")
away_team <- which(teams == "Man City")
away_team <- which(teams == "Man United")
away_team <- which(teams == "Man Newcastle")
away_team <- which(teams == "Newcastle")
away_team <- which(teams == "Norwich")
away_skill <- mm1[, col_name("skill", season, away_team)]
team_skill<-mm1[,str_detect(string=colnames(mm1),"skill\\[21,")]
team_skill<-(team_skill-rowMeans(team_skill))+mm1[, "home_baseline[21]"]
team_skill<-exp(team_skill)
colnames(team_skill)<-teams
team_skill<-team_skill[,c("Arsenal","Aston Villa","Cardiff","Chelsea","Crystal Palace",
"Everton","Fulham","Hull","Liverpool","Man City",
"Man United","Newcastle","Norwich","Southampton",
"Stoke","Sunderland","Swansea","Tottenham",
"West Brom","West Ham")]
team_skill<-team_skill[,order(colMeans(team_skill),decreasing = T)]
par(mar=c(3,1,2,1))
caterplot(team_skill,labels.loc="above",val.lim = c(0.7, 3.8))
col_name <- function(name, ...) {
paste0(name, "[", paste(..., sep = ","), "]")
}
n <- nrow(mm1)
m_pred <- sapply(1:nrow(PLeague), function(i) {
home_team <- which(teams == PLeague$HomeTeam[i])
away_team <- which(teams == PLeague$AwayTeam[i])
season <- which(seasons == PLeague$Season[i])
home_skill <- mm1[, col_name("skill", season, home_team)]
away_skill <- mm1[, col_name("skill", season, away_team)]
home_baseline <- mm1[, col_name("home_baseline", season)]
away_baseline <- mm1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
home_team <- which(teams == PLeague$HomeTeam=="Arsenal")
home_team <- which(teams =="Arsenal")
home_team
away_team <- which(teams == "FC Valencia")
home_team <- which(teams =="Aston Villa")
home_team
season <- which(seasons == "2012/13")
season
home_skill <- ms3[, col_name("skill", season, home_team)]
home_skill <- mm1[, col_name("skill", season, home_team)]
home_skill[,1]
dim(home_skill)
View(mm1)
A<-sort(as.vector(unique(PLeague$HomeTeam)))
A1<-sort(as.vector(unique(PLeague$AwayTeam)))
A
B<-intersect(A,A1)
B
table(is.na(PLeague$HomeTeam))
table(is.na(PLeague$AwayTeam))
View(PLeague)
setwd("~/Dropbox/Glasnost/Premier_League")
system.time(m1<-jags.model(model.file,data=data_list,n.chains=4,n.adapt=1000))
system.time(s1<- coda.samples(m1,
variable.names=c("home_baseline", "away_baseline","skill",
"season_sigma", "group_sigma", "group_skill"),
n.iter=10000,n.burnin=2500, thin=5))
ms1 <- as.matrix(s1)
n <- nrow(ms1)
m_pred <- sapply(1:nrow(PLeague), function(i) {
home_team <- which(teams == PLeague$HomeTeam[i])
away_team <- which(teams == PLeague$AwayTeam[i])
season <- which(seasons == PLeague$Season[i])
home_skill <- ms1[, col_name("skill", season, home_team)]
away_skill <- ms1[, col_name("skill", season, away_team)]
home_baseline <- ms1[, col_name("home_baseline", season)]
away_baseline <- ms1[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
